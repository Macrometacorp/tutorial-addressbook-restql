{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _slicedToArray = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar querystring_1 = require(\"querystring\");\n\nvar error_1 = require(\"./error\");\n\nvar request_1 = require(\"./util/request\");\n\nvar LinkedList = require(\"linkedlist/lib/linkedlist\");\n\nvar MIME_JSON = /\\/(json|javascript)(\\W|$)/;\nvar LEADER_ENDPOINT_HEADER = \"x-c8-endpoint\";\n\nfunction isSystemError(err) {\n  return Object.getPrototypeOf(err) === Error.prototype && err.hasOwnProperty(\"code\") && err.hasOwnProperty(\"errno\") && err.hasOwnProperty(\"syscall\");\n}\n\nvar Connection =\n/*#__PURE__*/\nfunction () {\n  function Connection() {\n    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Connection);\n\n    this._activeTasks = 0;\n    this._c8Version = 30000;\n    this._fabricName = \"_system\";\n    this._tenantName = \"_mm\";\n    this._queue = new LinkedList();\n    this._hosts = [];\n    this._urls = [];\n    if (typeof config === \"string\") config = {\n      url: config\n    };else if (Array.isArray(config)) config = {\n      url: config\n    };\n\n    if (config.c8Version !== undefined) {\n      this._c8Version = config.c8Version;\n    }\n\n    if (config.isAbsolute) {\n      this._fabricName = false;\n      this._tenantName = false;\n    }\n\n    this._agent = config.agent;\n    this._agentOptions = request_1.isBrowser ? Object.assign({}, config.agentOptions) : Object.assign({\n      maxSockets: 3,\n      keepAlive: true,\n      keepAliveMsecs: 1000\n    }, config.agentOptions);\n    this._maxTasks = this._agentOptions.maxSockets || 3;\n    if (this._agentOptions.keepAlive) this._maxTasks *= 2;\n    this._headers = Object.assign({}, config.headers);\n    this._loadBalancingStrategy = config.loadBalancingStrategy || \"NONE\";\n    this._useFailOver = this._loadBalancingStrategy !== \"ROUND_ROBIN\";\n\n    if (config.maxRetries === false) {\n      this._shouldRetry = false;\n      this._maxRetries = 0;\n    } else {\n      this._shouldRetry = true;\n      this._maxRetries = config.maxRetries || 0;\n    }\n\n    var urls = config.url ? Array.isArray(config.url) ? config.url : [config.url] : [\"https://test.macrometa.io\"];\n    this.addToHostList(urls);\n\n    if (this._loadBalancingStrategy === \"ONE_RANDOM\") {\n      this._activeHost = Math.floor(Math.random() * this._hosts.length);\n    } else {\n      this._activeHost = 0;\n    }\n  }\n\n  _createClass(Connection, [{\n    key: \"_runQueue\",\n    value: function _runQueue() {\n      var _this = this;\n\n      if (!this._queue.length || this._activeTasks >= this._maxTasks) return;\n\n      var task = this._queue.shift();\n\n      var host = this._activeHost;\n\n      if (task.host !== undefined) {\n        host = task.host;\n      } else if (this._loadBalancingStrategy === \"ROUND_ROBIN\") {\n        this._activeHost = (this._activeHost + 1) % this._hosts.length;\n      }\n\n      this._activeTasks += 1;\n\n      this._hosts[host](task.options, function (err, res) {\n        _this._activeTasks -= 1;\n\n        if (err) {\n          if (_this._hosts.length > 1 && _this._activeHost === host && _this._useFailOver) {\n            _this._activeHost = (_this._activeHost + 1) % _this._hosts.length;\n          }\n\n          if (!task.host && _this._shouldRetry && task.retries < (_this._maxRetries || _this._hosts.length - 1) && isSystemError(err) && err.syscall === \"connect\" && err.code === \"ECONNREFUSED\") {\n            task.retries += 1;\n\n            _this._queue.push(task);\n          } else {\n            task.reject(err);\n          }\n        } else {\n          var response = res;\n\n          if (response.statusCode === 503 && response.headers[LEADER_ENDPOINT_HEADER]) {\n            var url = response.headers[LEADER_ENDPOINT_HEADER];\n\n            var _this$addToHostList = _this.addToHostList(url),\n                _this$addToHostList2 = _slicedToArray(_this$addToHostList, 1),\n                index = _this$addToHostList2[0];\n\n            task.host = index;\n\n            if (_this._activeHost === host) {\n              _this._activeHost = index;\n            }\n\n            _this._queue.push(task);\n          } else {\n            response.host = host;\n            task.resolve(response);\n          }\n        }\n\n        _this._runQueue();\n      });\n    }\n  }, {\n    key: \"_buildUrl\",\n    value: function _buildUrl(_ref) {\n      var _ref$absolutePath = _ref.absolutePath,\n          absolutePath = _ref$absolutePath === void 0 ? false : _ref$absolutePath,\n          basePath = _ref.basePath,\n          path = _ref.path,\n          qs = _ref.qs;\n      var pathname = \"\";\n      var search;\n\n      if (!absolutePath) {\n        pathname = this._fabricPath;\n        if (basePath) pathname += basePath;\n      }\n\n      if (path) pathname += path;\n\n      if (qs) {\n        if (typeof qs === \"string\") search = \"?\".concat(qs);else search = \"?\".concat(querystring_1.stringify(qs));\n      }\n\n      return search ? {\n        pathname: pathname,\n        search: search\n      } : {\n        pathname: pathname\n      };\n    }\n  }, {\n    key: \"_sanitizeEndpointUrl\",\n    value: function _sanitizeEndpointUrl(url) {\n      if (url.startsWith(\"tcp:\")) return url.replace(/^tcp:/, \"http:\");\n      if (url.startsWith(\"ssl:\")) return url.replace(/^ssl:/, \"https:\");\n      return url;\n    }\n  }, {\n    key: \"addToHostList\",\n    value: function addToHostList(urls) {\n      var _this2 = this,\n          _this$_urls,\n          _this$_hosts;\n\n      var cleanUrls = (Array.isArray(urls) ? urls : [urls]).map(function (url) {\n        return _this2._sanitizeEndpointUrl(url);\n      });\n      var newUrls = cleanUrls.filter(function (url) {\n        return _this2._urls.indexOf(url) === -1;\n      });\n\n      (_this$_urls = this._urls).push.apply(_this$_urls, _toConsumableArray(newUrls));\n\n      (_this$_hosts = this._hosts).push.apply(_this$_hosts, _toConsumableArray(newUrls.map(function (url) {\n        return request_1.createRequest(url, _this2._agentOptions, _this2._agent);\n      })));\n\n      return cleanUrls.map(function (url) {\n        return _this2._urls.indexOf(url);\n      });\n    }\n  }, {\n    key: \"getFabricName\",\n    value: function getFabricName() {\n      return this._fabricName;\n    }\n  }, {\n    key: \"getTenantName\",\n    value: function getTenantName() {\n      return this._tenantName;\n    }\n  }, {\n    key: \"getUrls\",\n    value: function getUrls() {\n      return this._urls;\n    }\n  }, {\n    key: \"getActiveHost\",\n    value: function getActiveHost() {\n      return this._activeHost;\n    }\n  }, {\n    key: \"setFabricName\",\n    value: function setFabricName(fabricName) {\n      if (this._fabricName === false) {\n        throw new Error(\"Can not change fabric from absolute URL\");\n      }\n\n      this._fabricName = fabricName;\n    }\n  }, {\n    key: \"setTenantName\",\n    value: function setTenantName(tenantName) {\n      if (this._tenantName === false) {\n        throw new Error(\"Can not change tenant from absolute URL\");\n      }\n\n      this._tenantName = tenantName;\n    }\n  }, {\n    key: \"setHeader\",\n    value: function setHeader(key, value) {\n      this._headers[key] = value;\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = this._hosts[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var host = _step.value;\n          if (host.close) host.close();\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"request\",\n    value: function request(_a, getter) {\n      var _this3 = this;\n\n      var host = _a.host,\n          _a$method = _a.method,\n          method = _a$method === void 0 ? \"GET\" : _a$method,\n          body = _a.body,\n          _a$expectBinary = _a.expectBinary,\n          expectBinary = _a$expectBinary === void 0 ? false : _a$expectBinary,\n          _a$isBinary = _a.isBinary,\n          isBinary = _a$isBinary === void 0 ? false : _a$isBinary,\n          headers = _a.headers,\n          urlInfo = __rest(_a, [\"host\", \"method\", \"body\", \"expectBinary\", \"isBinary\", \"headers\"]);\n\n      return new Promise(function (_resolve, reject) {\n        var contentType = \"text/plain\";\n\n        if (isBinary) {\n          contentType = \"application/octet-stream\";\n        } else if (body) {\n          if (typeof body === \"object\") {\n            body = JSON.stringify(body);\n            contentType = \"application/json\";\n          } else {\n            body = String(body);\n          }\n        }\n\n        var extraHeaders = Object.assign({}, _this3._headers, {\n          \"content-type\": contentType,\n          \"x-c8-version\": String(_this3._c8Version)\n        });\n\n        _this3._queue.push({\n          retries: 0,\n          host: host,\n          options: {\n            url: _this3._buildUrl(urlInfo),\n            headers: Object.assign({}, extraHeaders, headers),\n            method: method,\n            expectBinary: expectBinary,\n            body: body\n          },\n          reject: reject,\n          resolve: function resolve(res) {\n            var contentType = res.headers[\"content-type\"];\n            var parsedBody = undefined;\n\n            if (res.body.length && contentType && contentType.match(MIME_JSON)) {\n              try {\n                parsedBody = res.body;\n                parsedBody = JSON.parse(parsedBody);\n              } catch (e) {\n                if (!expectBinary) {\n                  if (typeof parsedBody !== \"string\") {\n                    parsedBody = res.body.toString(\"utf-8\");\n                  }\n\n                  e.response = res;\n                  reject(e);\n                  return;\n                }\n              }\n            } else if (res.body && !expectBinary) {\n              parsedBody = res.body.toString(\"utf-8\");\n            } else {\n              parsedBody = res.body;\n            }\n\n            if (parsedBody && parsedBody.hasOwnProperty(\"error\") && parsedBody.hasOwnProperty(\"code\") && parsedBody.hasOwnProperty(\"errorMessage\") && parsedBody.hasOwnProperty(\"errorNum\")) {\n              res.body = parsedBody;\n              reject(new error_1.C8Error(res));\n            } else if (res.statusCode && res.statusCode >= 400) {\n              res.body = parsedBody;\n              reject(new error_1.HttpError(res));\n            } else {\n              if (!expectBinary) res.body = parsedBody;\n\n              _resolve(getter ? getter(res) : res);\n            }\n          }\n        });\n\n        _this3._runQueue();\n      });\n    }\n  }, {\n    key: \"_fabricPath\",\n    get: function get() {\n      return this._fabricName === false ? \"\" : \"/_tenant/\".concat(this._tenantName, \"/_fabric/\").concat(this._fabricName);\n    }\n  }, {\n    key: \"c8Major\",\n    get: function get() {\n      return Math.floor(this._c8Version / 10000);\n    }\n  }]);\n\n  return Connection;\n}();\n\nexports.Connection = Connection;","map":null,"metadata":{},"sourceType":"script"}