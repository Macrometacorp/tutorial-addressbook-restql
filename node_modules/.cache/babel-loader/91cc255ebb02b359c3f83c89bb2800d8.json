{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar c8ql_query_1 = require(\"./c8ql-query\");\n\nvar collection_1 = require(\"./collection\");\n\nvar connection_1 = require(\"./connection\");\n\nvar cursor_1 = require(\"./cursor\");\n\nvar error_1 = require(\"./error\");\n\nvar graph_1 = require(\"./graph\");\n\nvar tenant_1 = require(\"./tenant\");\n\nvar stream_1 = require(\"./stream\");\n\nvar route_1 = require(\"./route\");\n\nvar btoa_1 = require(\"./util/btoa\");\n\nvar user_1 = require(\"./user\");\n\nfunction colToString(collection) {\n  if (collection_1.isC8Collection(collection)) {\n    return String(collection.name);\n  } else return String(collection);\n}\n\nvar FABRIC_NOT_FOUND = 1228;\n\nvar Fabric =\n/*#__PURE__*/\nfunction () {\n  function Fabric(config) {\n    _classCallCheck(this, Fabric);\n\n    this._connection = new connection_1.Connection(config);\n  }\n\n  _createClass(Fabric, [{\n    key: \"route\",\n    value: function route(path, headers) {\n      return new route_1.Route(this._connection, path, headers);\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._connection.close();\n    } // Fabric manipulation\n\n  }, {\n    key: \"useFabric\",\n    value: function useFabric(fabricName) {\n      this._connection.setFabricName(fabricName);\n\n      return this;\n    }\n  }, {\n    key: \"useBearerAuth\",\n    value: function useBearerAuth(token) {\n      this._connection.setHeader(\"authorization\", \"Bearer \".concat(token));\n\n      return this;\n    }\n  }, {\n    key: \"useBasicAuth\",\n    value: function useBasicAuth(username, password) {\n      this._connection.setHeader(\"authorization\", \"Basic \".concat(btoa_1.btoa(\"\".concat(username, \":\").concat(password))));\n\n      return this;\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this._connection.request({\n        path: \"/database/current\"\n      }, function (res) {\n        return res.body.result;\n      });\n    }\n  }, {\n    key: \"exists\",\n    value: function exists() {\n      return this.get().then(function () {\n        return true;\n      }, function (err) {\n        if (error_1.isC8Error(err) && err.errorNum === FABRIC_NOT_FOUND) {\n          return false;\n        }\n\n        throw err;\n      });\n    }\n  }, {\n    key: \"createFabric\",\n    value: function createFabric(fabricName, users, options) {\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/database\",\n        body: {\n          users: users || [],\n          name: fabricName,\n          options: options\n        }\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"listFabrics\",\n    value: function listFabrics() {\n      return this._connection.request({\n        path: \"/database\"\n      }, function (res) {\n        return res.body.result;\n      });\n    }\n  }, {\n    key: \"listUserFabrics\",\n    value: function listUserFabrics() {\n      return this._connection.request({\n        path: \"/database/user\"\n      }, function (res) {\n        return res.body.result;\n      });\n    }\n  }, {\n    key: \"dropFabric\",\n    value: function dropFabric(fabricName) {\n      return this._connection.request({\n        method: \"DELETE\",\n        path: \"/database/\".concat(fabricName)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"login\",\n    value: function login(tenant, username, password) {\n      var _this = this;\n\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/_open/auth\",\n        body: {\n          username: username,\n          password: password,\n          tenant: tenant\n        },\n        absolutePath: true\n      }, function (res) {\n        _this.useBearerAuth(res.body.jwt);\n\n        return res.body.jwt;\n      });\n    }\n  }, {\n    key: \"updateFabricSpotRegion\",\n    value: function updateFabricSpotRegion(tenantName, fabricName) {\n      var datacenter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n      return this._connection.request({\n        method: \"PUT\",\n        path: \"_tenant/\".concat(tenantName, \"/_fabric/\").concat(fabricName, \"/database/\").concat(datacenter),\n        absolutePath: true\n      }, function (res) {\n        return res.body;\n      });\n    } // Collection manipulation\n\n  }, {\n    key: \"collection\",\n    value: function collection(collectionName) {\n      return new collection_1.DocumentCollection(this._connection, collectionName);\n    }\n  }, {\n    key: \"edgeCollection\",\n    value: function edgeCollection(collectionName) {\n      return new collection_1.EdgeCollection(this._connection, collectionName);\n    }\n  }, {\n    key: \"listCollections\",\n    value: function listCollections() {\n      var _this2 = this;\n\n      var excludeSystem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return this._connection.request({\n        path: \"/collection\",\n        qs: {\n          excludeSystem: excludeSystem\n        }\n      }, function (res) {\n        return _this2._connection.c8Major <= 2 ? res.body.collections : res.body.result;\n      });\n    }\n  }, {\n    key: \"collections\",\n    value: function collections() {\n      var excludeSystem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        var collections;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.listCollections(excludeSystem);\n\n              case 2:\n                collections = _context.sent;\n                return _context.abrupt(\"return\", collections.map(function (data) {\n                  return collection_1.constructCollection(_this3._connection, data);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"truncate\",\n    value: function truncate() {\n      var excludeSystem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this4 = this;\n\n        var collections;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.listCollections(excludeSystem);\n\n              case 2:\n                collections = _context2.sent;\n                _context2.next = 5;\n                return Promise.all(collections.map(function (data) {\n                  return _this4._connection.request({\n                    method: \"PUT\",\n                    path: \"/collection/\".concat(data.name, \"/truncate\")\n                  }, function (res) {\n                    return res.body;\n                  });\n                }));\n\n              case 5:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    } // Graph manipulation\n\n  }, {\n    key: \"graph\",\n    value: function graph(graphName) {\n      return new graph_1.Graph(this._connection, graphName);\n    }\n  }, {\n    key: \"listGraphs\",\n    value: function listGraphs() {\n      return this._connection.request({\n        path: \"/_api/graph\"\n      }, function (res) {\n        return res.body.graphs;\n      });\n    }\n  }, {\n    key: \"graphs\",\n    value: function graphs() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var _this5 = this;\n\n        var graphs;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.listGraphs();\n\n              case 2:\n                graphs = _context3.sent;\n                return _context3.abrupt(\"return\", graphs.map(function (data) {\n                  return _this5.graph(data._key);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"transaction\",\n    value: function transaction(collections, action, params, options) {\n      if (typeof params === \"number\") {\n        options = params;\n        params = undefined;\n      }\n\n      if (typeof options === \"number\") {\n        options = {\n          lockTimeout: options\n        };\n      }\n\n      if (typeof collections === \"string\") {\n        collections = {\n          write: [collections]\n        };\n      } else if (Array.isArray(collections)) {\n        collections = {\n          write: collections.map(colToString)\n        };\n      } else if (collection_1.isC8Collection(collections)) {\n        collections = {\n          write: colToString(collections)\n        };\n      } else if (collections && typeof collections === \"object\") {\n        collections = Object.assign({}, collections);\n\n        if (collections.read) {\n          if (!Array.isArray(collections.read)) {\n            collections.read = colToString(collections.read);\n          } else collections.read = collections.read.map(colToString);\n        }\n\n        if (collections.write) {\n          if (!Array.isArray(collections.write)) {\n            collections.write = colToString(collections.write);\n          } else collections.write = collections.write.map(colToString);\n        }\n      }\n\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/transaction\",\n        body: Object.assign({\n          collections: collections,\n          action: action,\n          params: params\n        }, options)\n      }, function (res) {\n        return res.body.result;\n      });\n    }\n  }, {\n    key: \"query\",\n    value: function query(_query, bindVars, opts) {\n      var _this6 = this;\n\n      if (c8ql_query_1.isC8QLQuery(_query)) {\n        opts = bindVars;\n        bindVars = _query.bindVars;\n        _query = _query.query;\n      } else if (c8ql_query_1.isC8QLLiteral(_query)) {\n        _query = _query.toC8QL();\n      }\n\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/cursor\",\n        body: Object.assign({}, opts, {\n          query: _query,\n          bindVars: bindVars\n        })\n      }, function (res) {\n        return new cursor_1.ArrayCursor(_this6._connection, res.body, res.host);\n      });\n    }\n  }, {\n    key: \"validateQuery\",\n    value: function validateQuery(query) {\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/query\",\n        body: {\n          query: query\n        }\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"explainQuery\",\n    value: function explainQuery(explainQueryObj) {\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/query/explain\",\n        body: Object.assign({}, explainQueryObj)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"getCurrentQueries\",\n    value: function getCurrentQueries() {\n      return this._connection.request({\n        path: \"/query/current\"\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"clearSlowQueries\",\n    value: function clearSlowQueries() {\n      return this._connection.request({\n        method: \"DELETE\",\n        path: \"/query/slow\"\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"getSlowQueries\",\n    value: function getSlowQueries() {\n      return this._connection.request({\n        path: \"/query/slow\"\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"terminateRunningQuery\",\n    value: function terminateRunningQuery(queryId) {\n      return this._connection.request({\n        method: \"DELETE\",\n        path: \"/query/\".concat(queryId)\n      }, function (res) {\n        return res.body;\n      });\n    } // Function management\n\n  }, {\n    key: \"listFunctions\",\n    value: function listFunctions() {\n      return this._connection.request({\n        path: \"/c8qlfunction\"\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"createFunction\",\n    value: function createFunction(name, code, isDeterministic) {\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/c8qlfunction\",\n        body: {\n          name: name,\n          code: code,\n          isDeterministic: isDeterministic\n        }\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"dropFunction\",\n    value: function dropFunction(name, group) {\n      var path = typeof group === \"boolean\" ? \"/c8qlfunction/\".concat(name, \"?group=\").concat(group) : \"/c8qlfunction/\".concat(name);\n      return this._connection.request({\n        method: \"DELETE\",\n        path: path\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"version\",\n    value: function version() {\n      var details = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._connection.request({\n        method: \"GET\",\n        path: \"/_tenant/\".concat(this._connection.getTenantName(), \"/_admin/version\"),\n        absolutePath: true,\n        qs: {\n          details: details\n        }\n      }, function (res) {\n        return res.body;\n      });\n    } // Tenant\n\n  }, {\n    key: \"useTenant\",\n    value: function useTenant(tenantName) {\n      this._connection.setTenantName(tenantName);\n\n      return this;\n    }\n  }, {\n    key: \"tenant\",\n    value: function tenant(tenantName) {\n      return new tenant_1.Tenant(this._connection, tenantName);\n    }\n  }, {\n    key: \"listTenants\",\n    value: function listTenants() {\n      return this._connection.request({\n        method: \"GET\",\n        path: \"/tenants\",\n        absolutePath: true\n      }, function (res) {\n        return res.body;\n      });\n    } //Stream\n\n  }, {\n    key: \"stream\",\n    value: function stream(streamName, local) {\n      return new stream_1.Stream(this._connection, streamName, local);\n    }\n  }, {\n    key: \"getStreams\",\n    value: function getStreams() {\n      return this._connection.request({\n        method: \"GET\",\n        path: \"/streams\"\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"listPersistentStreams\",\n    value: function listPersistentStreams() {\n      var local = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._connection.request({\n        method: \"GET\",\n        path: \"/streams/persistent\",\n        qs: \"local=\".concat(local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"clearBacklog\",\n    value: function clearBacklog() {\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/streams/clearbacklog\"\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"clearSubscriptionBacklog\",\n    value: function clearSubscriptionBacklog(subscription) {\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/streams/clearbacklog/\".concat(subscription)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(subscription) {\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/streams/unsubscribe/\".concat(subscription)\n      }, function (res) {\n        return res.body;\n      });\n    } //edge locations\n\n  }, {\n    key: \"getAllEdgeLocations\",\n    value: function getAllEdgeLocations() {\n      return this._connection.request({\n        method: \"GET\",\n        path: \"/datacenter/all\",\n        absolutePath: true\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"getLocalEdgeLocation\",\n    value: function getLocalEdgeLocation() {\n      return this._connection.request({\n        method: \"GET\",\n        path: \"/datacenter/local\",\n        absolutePath: true\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"changeEdgeLocationSpotStatus\",\n    value: function changeEdgeLocationSpotStatus(dcName, status) {\n      return this._connection.request({\n        method: \"PUT\",\n        path: \"/datacenter/\".concat(dcName, \"/\").concat(status),\n        absolutePath: true\n      }, function (res) {\n        return res.body;\n      });\n    } //user\n\n  }, {\n    key: \"user\",\n    value: function user(_user) {\n      return new user_1.default(this._connection, _user);\n    }\n  }, {\n    key: \"getAllUsers\",\n    value: function getAllUsers() {\n      return this._connection.request({\n        method: \"GET\",\n        path: \"/_admin/user\"\n      }, function (res) {\n        return res.body;\n      });\n    } //User Queries / RESTQL\n\n  }, {\n    key: \"listSavedQueries\",\n    value: function listSavedQueries() {\n      return this._connection.request({\n        method: \"GET\",\n        path: \"/restql/user\"\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"saveQuery\",\n    value: function saveQuery(name) {\n      var parameter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var value = arguments.length > 2 ? arguments[2] : undefined;\n\n      try {\n        if (name.includes(\" \")) throw \"Spaces are not allowed in query name\";\n        return this._connection.request({\n          method: \"POST\",\n          path: \"/restql\",\n          body: {\n            \"query\": {\n              \"name\": name,\n              \"parameter\": parameter,\n              \"value\": value\n            }\n          }\n        }, function (res) {\n          return res.body;\n        });\n      } catch (err) {\n        return err;\n      }\n    }\n  }, {\n    key: \"executeSavedQuery\",\n    value: function executeSavedQuery(queryName) {\n      var bindVars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/restql/execute/\".concat(queryName),\n        body: {\n          \"bindVars\": bindVars\n        }\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"updateSavedQuery\",\n    value: function updateSavedQuery(queryName) {\n      var parameter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var value = arguments.length > 2 ? arguments[2] : undefined;\n      return this._connection.request({\n        method: \"PUT\",\n        path: \"/restql/\".concat(queryName),\n        body: {\n          \"query\": {\n            \"name\": name,\n            \"parameter\": parameter,\n            \"value\": value\n          }\n        }\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"deleteSavedQuery\",\n    value: function deleteSavedQuery(queryName) {\n      return this._connection.request({\n        method: \"DELETE\",\n        path: \"/restql/\".concat(queryName)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"createRestqlCursor\",\n    value: function createRestqlCursor(query) {\n      var bindVars = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/restql/dynamic\",\n        body: {\n          \"bindVars\": [bindVars],\n          \"cache\": true,\n          \"count\": true,\n          \"options\": {\n            \"profile\": true\n          },\n          \"query\": query\n        }\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return this._connection.getFabricName() || null;\n    }\n  }]);\n\n  return Fabric;\n}();\n\nexports.Fabric = Fabric;","map":null,"metadata":{},"sourceType":"script"}