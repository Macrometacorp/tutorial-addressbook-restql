{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar collection_1 = require(\"./collection\");\n\nvar error_1 = require(\"./error\");\n\nvar GraphVertexCollection =\n/*#__PURE__*/\nfunction (_collection_1$BaseCol) {\n  _inherits(GraphVertexCollection, _collection_1$BaseCol);\n\n  function GraphVertexCollection(connection, name, graph) {\n    var _this;\n\n    _classCallCheck(this, GraphVertexCollection);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GraphVertexCollection).call(this, connection, name));\n    _this.type = collection_1.CollectionType.DOCUMENT_COLLECTION;\n    _this.graph = graph;\n    return _this;\n  }\n\n  _createClass(GraphVertexCollection, [{\n    key: \"document\",\n    value: function document(documentHandle) {\n      var graceful = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var result = this._connection.request({\n        path: \"/graph/\".concat(this.graph.name, \"/vertex/\").concat(this._documentHandle(documentHandle))\n      }, function (res) {\n        return res.body.vertex;\n      });\n\n      if (!graceful) return result;\n      return result.catch(function (err) {\n        if (error_1.isC8Error(err) && err.errorNum === collection_1.DOCUMENT_NOT_FOUND) {\n          return null;\n        }\n\n        throw err;\n      });\n    }\n  }, {\n    key: \"vertex\",\n    value: function vertex(documentHandle) {\n      var graceful = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return this.document(documentHandle, graceful);\n    }\n  }, {\n    key: \"save\",\n    value: function save(data, opts) {\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/graph/\".concat(this.graph.name, \"/vertex/\").concat(this.name),\n        body: data,\n        qs: opts\n      }, function (res) {\n        return res.body.vertex;\n      });\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(documentHandle, newValue) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _a;\n\n      var headers = {};\n\n      if (typeof opts === \"string\") {\n        opts = {\n          rev: opts\n        };\n      }\n\n      if (opts.rev) {\n        var _a2;\n\n        var rev;\n        _a = opts, (_a2 = _a, rev = _a2.rev, _a2), opts = __rest(_a, [\"rev\"]);\n        headers[\"if-match\"] = rev;\n      }\n\n      return this._connection.request({\n        method: \"PUT\",\n        path: \"/graph/\".concat(this.graph.name, \"/vertex/\").concat(this._documentHandle(documentHandle)),\n        body: newValue,\n        qs: opts,\n        headers: headers\n      }, function (res) {\n        return res.body.vertex;\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(documentHandle, newValue) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _a;\n\n      var headers = {};\n\n      if (typeof opts === \"string\") {\n        opts = {\n          rev: opts\n        };\n      }\n\n      if (opts.rev) {\n        var _a3;\n\n        var rev;\n        _a = opts, (_a3 = _a, rev = _a3.rev, _a3), opts = __rest(_a, [\"rev\"]);\n        headers[\"if-match\"] = rev;\n      }\n\n      return this._connection.request({\n        method: \"PATCH\",\n        path: \"/graph/\".concat(this.graph.name, \"/vertex/\").concat(this._documentHandle(documentHandle)),\n        body: newValue,\n        qs: opts,\n        headers: headers\n      }, function (res) {\n        return res.body.vertex;\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(documentHandle) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _a;\n\n      var headers = {};\n\n      if (typeof opts === \"string\") {\n        opts = {\n          rev: opts\n        };\n      }\n\n      if (opts.rev) {\n        var _a4;\n\n        var rev;\n        _a = opts, (_a4 = _a, rev = _a4.rev, _a4), opts = __rest(_a, [\"rev\"]);\n        headers[\"if-match\"] = rev;\n      }\n\n      return this._connection.request({\n        method: \"DELETE\",\n        path: \"/graph/\".concat(this.graph.name, \"/vertex/\").concat(this._documentHandle(documentHandle)),\n        qs: opts,\n        headers: headers\n      }, function (res) {\n        return res.body.removed;\n      });\n    }\n  }]);\n\n  return GraphVertexCollection;\n}(collection_1.BaseCollection);\n\nexports.GraphVertexCollection = GraphVertexCollection;\n\nvar GraphEdgeCollection =\n/*#__PURE__*/\nfunction (_collection_1$EdgeCol) {\n  _inherits(GraphEdgeCollection, _collection_1$EdgeCol);\n\n  function GraphEdgeCollection(connection, name, graph) {\n    var _this2;\n\n    _classCallCheck(this, GraphEdgeCollection);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(GraphEdgeCollection).call(this, connection, name));\n    _this2.type = collection_1.CollectionType.EDGE_COLLECTION;\n    _this2.type = collection_1.CollectionType.EDGE_COLLECTION;\n    _this2.graph = graph;\n    return _this2;\n  }\n\n  _createClass(GraphEdgeCollection, [{\n    key: \"document\",\n    value: function document(documentHandle) {\n      var graceful = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var result = this._connection.request({\n        path: \"/graph/\".concat(this.graph.name, \"/edge/\").concat(this._documentHandle(documentHandle))\n      }, function (res) {\n        return res.body.edge;\n      });\n\n      if (!graceful) return result;\n      return result.catch(function (err) {\n        if (error_1.isC8Error(err) && err.errorNum === collection_1.DOCUMENT_NOT_FOUND) {\n          return null;\n        }\n\n        throw err;\n      });\n    }\n  }, {\n    key: \"save\",\n    value: function save(data, fromId, toId, opts) {\n      if (fromId !== undefined) {\n        if (toId !== undefined) {\n          data._from = this._documentHandle(fromId);\n          data._to = this._documentHandle(toId);\n        } else {\n          opts = fromId;\n        }\n      }\n\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/graph/\".concat(this.graph.name, \"/edge/\").concat(this.name),\n        body: data,\n        qs: opts\n      }, function (res) {\n        return res.body.edge;\n      });\n    }\n  }, {\n    key: \"replace\",\n    value: function replace(documentHandle, newValue) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _a;\n\n      var headers = {};\n\n      if (typeof opts === \"string\") {\n        opts = {\n          rev: opts\n        };\n      }\n\n      if (opts.rev) {\n        var _a5;\n\n        var rev;\n        _a = opts, (_a5 = _a, rev = _a5.rev, _a5), opts = __rest(_a, [\"rev\"]);\n        headers[\"if-match\"] = rev;\n      }\n\n      return this._connection.request({\n        method: \"PUT\",\n        path: \"/graph/\".concat(this.graph.name, \"/edge/\").concat(this._documentHandle(documentHandle)),\n        body: newValue,\n        qs: opts,\n        headers: headers\n      }, function (res) {\n        return res.body.edge;\n      });\n    }\n  }, {\n    key: \"update\",\n    value: function update(documentHandle, newValue) {\n      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n      var _a;\n\n      var headers = {};\n\n      if (typeof opts === \"string\") {\n        opts = {\n          rev: opts\n        };\n      }\n\n      if (opts.rev) {\n        var _a6;\n\n        var rev;\n        _a = opts, (_a6 = _a, rev = _a6.rev, _a6), opts = __rest(_a, [\"rev\"]);\n        headers[\"if-match\"] = rev;\n      }\n\n      return this._connection.request({\n        method: \"PATCH\",\n        path: \"/graph/\".concat(this.graph.name, \"/edge/\").concat(this._documentHandle(documentHandle)),\n        body: newValue,\n        qs: opts,\n        headers: headers\n      }, function (res) {\n        return res.body.edge;\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(documentHandle) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _a;\n\n      var headers = {};\n\n      if (typeof opts === \"string\") {\n        opts = {\n          rev: opts\n        };\n      }\n\n      if (opts.rev) {\n        var _a7;\n\n        var rev;\n        _a = opts, (_a7 = _a, rev = _a7.rev, _a7), opts = __rest(_a, [\"rev\"]);\n        headers[\"if-match\"] = rev;\n      }\n\n      return this._connection.request({\n        method: \"DELETE\",\n        path: \"/graph/\".concat(this.graph.name, \"/edge/\").concat(this._documentHandle(documentHandle)),\n        qs: opts,\n        headers: headers\n      }, function (res) {\n        return res.body.removed;\n      });\n    }\n  }]);\n\n  return GraphEdgeCollection;\n}(collection_1.EdgeCollection);\n\nexports.GraphEdgeCollection = GraphEdgeCollection;\nvar GRAPH_NOT_FOUND = 1924;\n\nvar Graph =\n/*#__PURE__*/\nfunction () {\n  function Graph(connection, name) {\n    _classCallCheck(this, Graph);\n\n    this.name = name;\n    this._connection = connection;\n  }\n\n  _createClass(Graph, [{\n    key: \"get\",\n    value: function get() {\n      return this._connection.request({\n        path: \"/_api/graph/\".concat(this.name)\n      }, function (res) {\n        return res.body.graph;\n      });\n    }\n  }, {\n    key: \"exists\",\n    value: function exists() {\n      return this.get().then(function () {\n        return true;\n      }, function (err) {\n        if (error_1.isC8Error(err) && err.errorNum === GRAPH_NOT_FOUND) {\n          return false;\n        }\n\n        throw err;\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var properties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/_api/graph\",\n        body: Object.assign({}, properties, {\n          name: this.name\n        })\n      }, function (res) {\n        return res.body.graph;\n      });\n    }\n  }, {\n    key: \"drop\",\n    value: function drop() {\n      var dropCollections = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      return this._connection.request({\n        method: \"DELETE\",\n        path: \"/_api/graph/\".concat(this.name),\n        qs: {\n          dropCollections: dropCollections\n        }\n      }, function (res) {\n        return res.body.removed;\n      });\n    }\n  }, {\n    key: \"vertexCollection\",\n    value: function vertexCollection(collectionName) {\n      return new GraphVertexCollection(this._connection, collectionName, this);\n    }\n  }, {\n    key: \"listVertexCollections\",\n    value: function listVertexCollections() {\n      return this._connection.request({\n        path: \"/_api/graph/\".concat(this.name, \"/vertex\")\n      }, function (res) {\n        return res.body.collections;\n      });\n    }\n  }, {\n    key: \"vertexCollections\",\n    value: function vertexCollections() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this3 = this;\n\n        var names;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.listVertexCollections();\n\n              case 2:\n                names = _context.sent;\n                return _context.abrupt(\"return\", names.map(function (name) {\n                  return new GraphVertexCollection(_this3._connection, name, _this3);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"addVertexCollection\",\n    value: function addVertexCollection(collection) {\n      if (collection_1.isC8Collection(collection)) {\n        collection = collection.name;\n      }\n\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/_api/graph/\".concat(this.name, \"/vertex\")\n      }, function (res) {\n        return res.body.graph;\n      });\n    }\n  }, {\n    key: \"removeVertexCollection\",\n    value: function removeVertexCollection(collection) {\n      var dropCollection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      if (collection_1.isC8Collection(collection)) {\n        collection = collection.name;\n      }\n\n      return this._connection.request({\n        method: \"DELETE\",\n        path: \"/_api/graph/\".concat(this.name, \"/vertex/\").concat(collection),\n        qs: {\n          dropCollection: dropCollection\n        }\n      }, function (res) {\n        return res.body.graph;\n      });\n    }\n  }, {\n    key: \"edgeCollection\",\n    value: function edgeCollection(collectionName) {\n      return new GraphEdgeCollection(this._connection, collectionName, this);\n    }\n  }, {\n    key: \"listEdgeCollections\",\n    value: function listEdgeCollections() {\n      return this._connection.request({\n        path: \"/_api/graph/\".concat(this.name, \"/edge\")\n      }, function (res) {\n        return res.body.collections;\n      });\n    }\n  }, {\n    key: \"edgeCollections\",\n    value: function edgeCollections() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this4 = this;\n\n        var names;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.listEdgeCollections();\n\n              case 2:\n                names = _context2.sent;\n                return _context2.abrupt(\"return\", names.map(function (name) {\n                  return new GraphEdgeCollection(_this4._connection, name, _this4);\n                }));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"addEdgeDefinition\",\n    value: function addEdgeDefinition(definition) {\n      return this._connection.request({\n        method: \"POST\",\n        path: \"/_api/graph/\".concat(this.name, \"/edge\"),\n        body: definition\n      }, function (res) {\n        return res.body.graph;\n      });\n    }\n  }, {\n    key: \"replaceEdgeDefinition\",\n    value: function replaceEdgeDefinition(definitionName, definition) {\n      return this._connection.request({\n        method: \"PUT\",\n        path: \"/_api/graph/\".concat(this.name, \"/edge/\").concat(definitionName),\n        body: definition\n      }, function (res) {\n        return res.body.graph;\n      });\n    }\n  }, {\n    key: \"removeEdgeDefinition\",\n    value: function removeEdgeDefinition(definitionName) {\n      var dropCollection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return this._connection.request({\n        method: \"DELETE\",\n        path: \"/_api/graph/\".concat(this.name, \"/edge/\").concat(definitionName),\n        qs: {\n          dropCollection: dropCollection\n        }\n      }, function (res) {\n        return res.body.graph;\n      });\n    }\n  }]);\n\n  return Graph;\n}();\n\nexports.Graph = Graph;","map":null,"metadata":{},"sourceType":"script"}