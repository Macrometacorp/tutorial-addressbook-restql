{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ArrayCursor =\n/*#__PURE__*/\nfunction () {\n  function ArrayCursor(connection, body, host) {\n    _classCallCheck(this, ArrayCursor);\n\n    this.extra = body.extra;\n    this._connection = connection;\n    this._result = body.result;\n    this._hasMore = Boolean(body.hasMore);\n    this._id = body.id;\n    this._host = host;\n    this.count = body.count;\n  }\n\n  _createClass(ArrayCursor, [{\n    key: \"_drain\",\n    value: function _drain() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this._more();\n\n              case 2:\n                if (this._hasMore) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", this);\n\n              case 4:\n                return _context.abrupt(\"return\", this._drain());\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_more\",\n    value: function _more() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        var _this$_result, res;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this._hasMore) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                _context2.next = 6;\n                return this._connection.request({\n                  method: \"PUT\",\n                  path: \"/cursor/\".concat(this._id),\n                  host: this._host\n                });\n\n              case 6:\n                res = _context2.sent;\n\n                (_this$_result = this._result).push.apply(_this$_result, _toConsumableArray(res.body.result));\n\n                this._hasMore = res.body.hasMore;\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      return this._connection.request({\n        method: \"DELETE\",\n        path: \"/cursor/\".concat(this._id)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"all\",\n    value: function all() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this._drain();\n\n              case 2:\n                result = this._result;\n                this._result = [];\n                return _context3.abrupt(\"return\", result);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(!this._result.length && this._hasMore)) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                _context4.next = 3;\n                return this._more();\n\n              case 3:\n                _context4.next = 0;\n                break;\n\n              case 5:\n                if (this._result.length) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", undefined);\n\n              case 7:\n                return _context4.abrupt(\"return\", this._result.shift());\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"hasNext\",\n    value: function hasNext() {\n      return Boolean(this._hasMore || this._result.length);\n    }\n  }, {\n    key: \"each\",\n    value: function each(fn) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5() {\n        var index, result;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                index = 0;\n\n              case 1:\n                if (!(this._result.length || this._hasMore)) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                result = void 0;\n\n              case 3:\n                if (!this._result.length) {\n                  _context5.next = 10;\n                  break;\n                }\n\n                result = fn(this._result.shift(), index, this);\n                index++;\n\n                if (!(result === false)) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", result);\n\n              case 8:\n                _context5.next = 3;\n                break;\n\n              case 10:\n                if (!this._hasMore) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                _context5.next = 13;\n                return this._more();\n\n              case 13:\n                _context5.next = 1;\n                break;\n\n              case 15:\n                return _context5.abrupt(\"return\", true);\n\n              case 16:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"every\",\n    value: function every(fn) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6() {\n        var index, result;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                index = 0;\n\n              case 1:\n                if (!(this._result.length || this._hasMore)) {\n                  _context6.next = 15;\n                  break;\n                }\n\n                result = void 0;\n\n              case 3:\n                if (!this._result.length) {\n                  _context6.next = 10;\n                  break;\n                }\n\n                result = fn(this._result.shift(), index, this);\n                index++;\n\n                if (result) {\n                  _context6.next = 8;\n                  break;\n                }\n\n                return _context6.abrupt(\"return\", false);\n\n              case 8:\n                _context6.next = 3;\n                break;\n\n              case 10:\n                if (!this._hasMore) {\n                  _context6.next = 13;\n                  break;\n                }\n\n                _context6.next = 13;\n                return this._more();\n\n              case 13:\n                _context6.next = 1;\n                break;\n\n              case 15:\n                return _context6.abrupt(\"return\", true);\n\n              case 16:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"some\",\n    value: function some(fn) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee7() {\n        var index, result;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                index = 0;\n\n              case 1:\n                if (!(this._result.length || this._hasMore)) {\n                  _context7.next = 15;\n                  break;\n                }\n\n                result = void 0;\n\n              case 3:\n                if (!this._result.length) {\n                  _context7.next = 10;\n                  break;\n                }\n\n                result = fn(this._result.shift(), index, this);\n                index++;\n\n                if (!result) {\n                  _context7.next = 8;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", true);\n\n              case 8:\n                _context7.next = 3;\n                break;\n\n              case 10:\n                if (!this._hasMore) {\n                  _context7.next = 13;\n                  break;\n                }\n\n                _context7.next = 13;\n                return this._more();\n\n              case 13:\n                _context7.next = 1;\n                break;\n\n              case 15:\n                return _context7.abrupt(\"return\", false);\n\n              case 16:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }, {\n    key: \"map\",\n    value: function map(fn) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee8() {\n        var index, result;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                index = 0;\n                result = [];\n\n              case 2:\n                if (!(this._result.length || this._hasMore)) {\n                  _context8.next = 9;\n                  break;\n                }\n\n                while (this._result.length) {\n                  result.push(fn(this._result.shift(), index, this));\n                  index++;\n                }\n\n                if (!this._hasMore) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                _context8.next = 7;\n                return this._more();\n\n              case 7:\n                _context8.next = 2;\n                break;\n\n              case 9:\n                return _context8.abrupt(\"return\", result);\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n    }\n  }, {\n    key: \"reduce\",\n    value: function reduce(fn, accu) {\n      return __awaiter(this, void 0, void 0,\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee9() {\n        var index;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                index = 0;\n\n                if (!(accu === undefined)) {\n                  _context9.next = 7;\n                  break;\n                }\n\n                if (!(!this._result.length && !this._hasMore)) {\n                  _context9.next = 5;\n                  break;\n                }\n\n                _context9.next = 5;\n                return this._more();\n\n              case 5:\n                accu = this._result.shift();\n                index += 1;\n\n              case 7:\n                if (!(this._result.length || this._hasMore)) {\n                  _context9.next = 14;\n                  break;\n                }\n\n                while (this._result.length) {\n                  accu = fn(accu, this._result.shift(), index, this);\n                  index++;\n                }\n\n                if (!this._hasMore) {\n                  _context9.next = 12;\n                  break;\n                }\n\n                _context9.next = 12;\n                return this._more();\n\n              case 12:\n                _context9.next = 7;\n                break;\n\n              case 14:\n                return _context9.abrupt(\"return\", accu);\n\n              case 15:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n    }\n  }]);\n\n  return ArrayCursor;\n}();\n\nexports.ArrayCursor = ArrayCursor;","map":null,"metadata":{},"sourceType":"script"}