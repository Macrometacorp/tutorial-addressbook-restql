{"ast":null,"code":"module.exports = function () {\n  Object.defineProperty(this, '_head', {\n    value: undefined,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  });\n  Object.defineProperty(this, '_tail', {\n    value: undefined,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  });\n  Object.defineProperty(this, '_next', {\n    value: undefined,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  });\n  Object.defineProperty(this, '_length', {\n    value: 0,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  });\n};\n\nmodule.exports.prototype.__defineGetter__('head', function () {\n  return this._head && this._head.data;\n});\n\nmodule.exports.prototype.__defineGetter__('tail', function () {\n  return this._tail && this._tail.data;\n});\n\nmodule.exports.prototype.__defineGetter__('current', function () {\n  return this._current && this._current.data;\n});\n\nmodule.exports.prototype.__defineGetter__('length', function () {\n  return this._length;\n});\n\nmodule.exports.prototype.push = function (data) {\n  this._tail = new Item(data, this._tail);\n\n  if (this._length === 0) {\n    this._head = this._tail;\n    this._current = this._head;\n    this._next = this._head;\n  }\n\n  this._length++;\n};\n\nmodule.exports.prototype.pop = function () {\n  var tail = this._tail;\n\n  if (this._length === 0) {\n    return;\n  }\n\n  this._length--;\n\n  if (this._length === 0) {\n    this._head = this._tail = this._current = this._next = undefined;\n    return tail.data;\n  }\n\n  this._tail = tail.prev;\n  this._tail.next = undefined;\n\n  if (this._current === tail) {\n    this._current = this._tail;\n    this._next = undefined;\n  }\n\n  return tail.data;\n};\n\nmodule.exports.prototype.shift = function () {\n  var head = this._head;\n\n  if (this._length === 0) {\n    return;\n  }\n\n  this._length--;\n\n  if (this._length === 0) {\n    this._head = this._tail = this._current = this._next = undefined;\n    return head.data;\n  }\n\n  this._head = this._head.next;\n\n  if (this._current === head) {\n    this._current = this._head;\n    this._next = this._current.next;\n  }\n\n  return head.data;\n};\n\nmodule.exports.prototype.unshift = function (data) {\n  this._head = new Item(data, undefined, this._head);\n\n  if (this._length === 0) {\n    this._tail = this._head;\n    this._next = this._head;\n  }\n\n  this._length++;\n};\n\nmodule.exports.prototype.unshiftCurrent = function () {\n  var current = this._current;\n\n  if (current === this._head || this._length < 2) {\n    return current && current.data;\n  } // remove\n\n\n  if (current === this._tail) {\n    this._tail = current.prev;\n    this._tail.next = undefined;\n    this._current = this._tail;\n  } else {\n    current.next.prev = current.prev;\n    current.prev.next = current.next;\n    this._current = current.prev;\n  }\n\n  this._next = this._current.next; // unshift\n\n  current.next = this._head;\n  current.prev = undefined;\n  this._head.prev = current;\n  this._head = current;\n  return current.data;\n};\n\nmodule.exports.prototype.removeCurrent = function (data) {\n  var current = this._current;\n\n  if (this._length === 0) {\n    return;\n  }\n\n  this._length--;\n\n  if (this._length === 0) {\n    this._head = this._tail = this._current = this._next = undefined;\n    return current.data;\n  }\n\n  if (current === this._tail) {\n    this._tail = current.prev;\n    this._tail.next = undefined;\n    this._current = this._tail;\n  } else if (current === this._head) {\n    this._head = current.next;\n    this._head.prev = undefined;\n    this._current = this._head;\n  } else {\n    current.next.prev = current.prev;\n    current.prev.next = current.next;\n    this._current = current.prev;\n  }\n\n  this._next = this._current.next;\n  return current.data;\n};\n\nmodule.exports.prototype.next = function () {\n  var next = this._next;\n\n  if (next !== undefined) {\n    this._next = next.next;\n    this._current = next;\n    return next.data;\n  }\n};\n\nmodule.exports.prototype.resetCursor = function () {\n  this._current = this._next = this._head;\n  return this;\n};\n\nfunction Item(data, prev, next) {\n  this.next = next;\n  if (next) next.prev = this;\n  this.prev = prev;\n  if (prev) prev.next = this;\n  this.data = data;\n}","map":null,"metadata":{},"sourceType":"script"}