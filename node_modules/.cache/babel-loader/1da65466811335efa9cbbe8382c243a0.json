{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar url_1 = require(\"url\");\n\nvar joinPath_1 = require(\"./joinPath\");\n\nvar xhr_1 = require(\"./xhr\");\n\nexports.isBrowser = true;\n\nfunction omit(obj, keys) {\n  var result = {};\n\n  var _arr = Object.keys(obj);\n\n  for (var _i = 0; _i < _arr.length; _i++) {\n    var key = _arr[_i];\n    if (keys.includes(key)) continue;\n    result[key] = obj[key];\n  }\n\n  return result;\n}\n\nfunction createRequest(baseUrl, agentOptions) {\n  var baseUrlParts = url_1.parse(baseUrl);\n  var options = omit(agentOptions, [\"keepAlive\", \"keepAliveMsecs\", \"maxSockets\"]);\n  return function request(_ref, cb) {\n    var method = _ref.method,\n        url = _ref.url,\n        headers = _ref.headers,\n        body = _ref.body,\n        expectBinary = _ref.expectBinary;\n    var urlParts = Object.assign({}, baseUrlParts, {\n      pathname: url.pathname ? baseUrlParts.pathname ? joinPath_1.joinPath(baseUrlParts.pathname, url.pathname) : url.pathname : baseUrlParts.pathname,\n      search: url.search ? baseUrlParts.search ? \"\".concat(baseUrlParts.search, \"&\").concat(url.search.slice(1)) : url.search : baseUrlParts.search\n    });\n\n    var _callback = function callback(err, res) {\n      _callback = function callback() {\n        return undefined;\n      };\n\n      cb(err, res);\n    };\n\n    var req = xhr_1.default(Object.assign({\n      responseType: expectBinary ? \"blob\" : \"text\"\n    }, options, {\n      url: url_1.format(urlParts),\n      useXDR: true,\n      body: body,\n      method: method,\n      headers: headers\n    }), function (err, res) {\n      if (!err) {\n        if (!res.body) res.body = \"\";\n\n        _callback(null, res);\n      } else {\n        var error = err;\n        error.request = req;\n\n        _callback(error);\n      }\n    });\n  };\n}\n\nexports.createRequest = createRequest;","map":null,"metadata":{},"sourceType":"script"}