{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/guest/workspace/tutorials/tutorial-addressbook-restql/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar helper_1 = require(\"./util/helper\");\n\nvar btoa_1 = require(\"./util/btoa\"); // 2 document\n// 3 edge\n// 4 persistent\n\n\nvar webSocket_1 = require(\"./util/webSocket\");\n\nvar StreamConstants;\n\n(function (StreamConstants) {\n  StreamConstants[\"PERSISTENT\"] = \"persistent\";\n})(StreamConstants = exports.StreamConstants || (exports.StreamConstants = {}));\n\n;\n\nvar Stream =\n/*#__PURE__*/\nfunction () {\n  function Stream(connection, name) {\n    var local = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    _classCallCheck(this, Stream);\n\n    this._connection = connection;\n    this.name = name;\n    this.local = local;\n    this._consumers = [];\n    this.setIntervalId = undefined;\n  }\n\n  _createClass(Stream, [{\n    key: \"_getPath\",\n    value: function _getPath(urlSuffix) {\n      return helper_1.getFullStreamPath(this.name, urlSuffix);\n    }\n  }, {\n    key: \"createStream\",\n    value: function createStream() {\n      return this._connection.request({\n        method: \"POST\",\n        path: this._getPath(),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"expireMessagesOnAllSubscriptions\",\n    value: function expireMessagesOnAllSubscriptions(expireTimeInSeconds) {\n      var urlSuffix = \"/all_subscription/expireMessages/\".concat(expireTimeInSeconds);\n      return this._connection.request({\n        method: \"POST\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"backlog\",\n    value: function backlog() {\n      var urlSuffix = \"/backlog\";\n      return this._connection.request({\n        method: \"GET\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"compaction\",\n    value: function compaction() {\n      var urlSuffix = \"/compaction\";\n      return this._connection.request({\n        method: \"GET\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"triggerCompaction\",\n    value: function triggerCompaction() {\n      var urlSuffix = \"/compaction\";\n      return this._connection.request({\n        method: \"PUT\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"getStreamStatistics\",\n    value: function getStreamStatistics() {\n      var urlSuffix = \"/stats\";\n      return this._connection.request({\n        method: \"GET\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"deleteSubscription\",\n    value: function deleteSubscription(subscription) {\n      var urlSuffix = \"/subscription/\".concat(subscription);\n      return this._connection.request({\n        method: \"DELETE\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"resetSubscriptionToPosition\",\n    value: function resetSubscriptionToPosition(subscription) {\n      var urlSuffix = \"/subscription/\".concat(subscription);\n      return this._connection.request({\n        method: \"PUT\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"expireMessages\",\n    value: function expireMessages(subscription, expireTimeInSeconds) {\n      var urlSuffix = \"/subscription/\".concat(subscription, \"/expireMessages/\").concat(expireTimeInSeconds);\n      return this._connection.request({\n        method: \"POST\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"resetCursor\",\n    value: function resetCursor(subscription) {\n      var urlSuffix = \"/subscription/\".concat(subscription, \"/resetcursor\");\n      return this._connection.request({\n        method: \"POST\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"resetSubscriptionToTimestamp\",\n    value: function resetSubscriptionToTimestamp(subscription, timestamp) {\n      var urlSuffix = \"/subscription/\".concat(subscription, \"/resetcursor/\").concat(timestamp);\n      return this._connection.request({\n        method: \"POST\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"skipNumberOfMessages\",\n    value: function skipNumberOfMessages(subscription, numMessages) {\n      var urlSuffix = \"/subscription/\".concat(subscription, \"/skip/\").concat(numMessages);\n      return this._connection.request({\n        method: \"POST\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"skipAllMessages\",\n    value: function skipAllMessages(subscription) {\n      var urlSuffix = \"/subscription/\".concat(subscription, \"/skip_all\");\n      return this._connection.request({\n        method: \"POST\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"getSubscriptionList\",\n    value: function getSubscriptionList() {\n      var urlSuffix = \"/subscriptions\";\n      return this._connection.request({\n        method: \"GET\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"terminateStream\",\n    value: function terminateStream() {\n      var urlSuffix = \"/terminate\";\n      return this._connection.request({\n        method: \"POST\",\n        path: this._getPath(urlSuffix),\n        qs: \"local=\".concat(this.local)\n      }, function (res) {\n        return res.body;\n      });\n    }\n  }, {\n    key: \"consumer\",\n    value: function consumer(subscriptionName, callbackObj, dcUrl) {\n      var _this = this;\n\n      var lowerCaseUrl = dcUrl.toLocaleLowerCase();\n      if (lowerCaseUrl.includes(\"http\") || lowerCaseUrl.includes(\"https\")) throw \"Invalid DC name\";\n      var onopen = callbackObj.onopen,\n          onclose = callbackObj.onclose,\n          onerror = callbackObj.onerror,\n          onmessage = callbackObj.onmessage;\n      var persist = StreamConstants.PERSISTENT;\n      var region = this.local ? 'c8local' : 'c8global';\n\n      var tenant = this._connection.getTenantName();\n\n      var dbName = this._connection.getFabricName();\n\n      if (!dbName || !tenant) throw \"Set correct DB and/or tenant name before using.\";\n      var consumerUrl = \"wss://\".concat(dcUrl, \"/_ws/ws/v2/consumer/\").concat(persist, \"/\").concat(tenant, \"/\").concat(region, \".\").concat(dbName, \"/\").concat(this.name, \"/\").concat(subscriptionName);\n\n      this._consumers.push(webSocket_1.ws(consumerUrl));\n\n      var lastIndex = this._consumers.length - 1;\n      var consumer = this._consumers[lastIndex];\n      consumer.on('open', function () {\n        typeof onopen === 'function' && onopen();\n      });\n      consumer.on('close', function () {\n        _this.setIntervalId && clearInterval(_this.setIntervalId);\n        typeof onclose === 'function' && onclose();\n      });\n      consumer.on('error', function (e) {\n        console.log(\"Consumer connection errored \", e);\n        typeof onerror === 'function' && onerror(e);\n      });\n      consumer.on(\"message\", function (msg) {\n        var message = JSON.parse(msg);\n        var ackMsg = {\n          \"messageId\": message.messageId\n        };\n        var payload = message.payload;\n\n        if (payload !== btoa_1.btoa('noop') && payload !== 'noop') {\n          if (typeof onmessage === 'function') {\n            consumer.send(JSON.stringify(ackMsg));\n            onmessage(msg);\n          }\n        } else {\n          consumer.send(JSON.stringify(ackMsg));\n        }\n      });\n      !this._noopProducer && this.noopProducer(dcUrl);\n    }\n  }, {\n    key: \"noopProducer\",\n    value: function noopProducer(dcUrl) {\n      var _this2 = this;\n\n      var lowerCaseUrl = dcUrl.toLocaleLowerCase();\n      if (lowerCaseUrl.includes(\"http\") || lowerCaseUrl.includes(\"https\")) throw \"Invalid DC name\";\n      var persist = StreamConstants.PERSISTENT;\n      var region = this.local ? 'c8local' : 'c8global';\n\n      var tenant = this._connection.getTenantName();\n\n      var dbName = this._connection.getFabricName();\n\n      if (!dbName || !tenant) throw \"Set correct DB and/or tenant name before using.\";\n      var noopProducerUrl = \"wss://\".concat(dcUrl, \"/_ws/ws/v2/producer/\").concat(persist, \"/\").concat(tenant, \"/\").concat(region, \".\").concat(dbName, \"/\").concat(this.name);\n      this._noopProducer = webSocket_1.ws(noopProducerUrl);\n\n      this._noopProducer.on('open', function () {\n        _this2.setIntervalId = setInterval(function () {\n          _this2._noopProducer.send(JSON.stringify({\n            payload: 'noop'\n          }));\n        }, 30000);\n      });\n\n      this._noopProducer.on('error', function (e) {\n        return console.log(\"noop producer errored \", e);\n      });\n    }\n  }, {\n    key: \"producer\",\n    value: function producer(message, dcUrl) {\n      var _this3 = this;\n\n      if (this._producer === undefined) {\n        if (!dcUrl) throw \"DC name not provided to establish producer connection\";\n        var lowerCaseUrl = dcUrl.toLocaleLowerCase();\n        if (lowerCaseUrl.includes(\"http\") || lowerCaseUrl.includes(\"https\")) throw \"Invalid DC name\";\n        var persist = StreamConstants.PERSISTENT;\n        var region = this.local ? 'c8local' : 'c8global';\n\n        var tenant = this._connection.getTenantName();\n\n        var dbName = this._connection.getFabricName();\n\n        if (!dbName || !tenant) throw \"Set correct DB and/or tenant name before using.\";\n        var producerUrl = \"wss://\".concat(dcUrl, \"/_ws/ws/v2/producer/\").concat(persist, \"/\").concat(tenant, \"/\").concat(region, \".\").concat(dbName, \"/\").concat(this.name);\n        this._producer = webSocket_1.ws(producerUrl);\n\n        this._producer.on(\"message\", function (msg) {\n          return console.log('received ack: %s', msg);\n        });\n\n        this._producer.on(\"open\", function () {\n          _this3._producer.send(JSON.stringify({\n            payload: btoa_1.btoa(message)\n          }));\n        });\n\n        this._producer.on('close', function (e) {\n          console.log(\"Producer connection closed \", e);\n        });\n\n        this._producer.on('error', function (e) {\n          console.log(\"Producer connection errored \", e);\n        });\n      } else {\n        if (this._producer.readyState === this._producer.OPEN) {\n          this._producer.send(JSON.stringify({\n            payload: btoa_1.btoa(message)\n          }));\n        } else {\n          console.warn(\"Producer connection not open yet. Please wait.\");\n        }\n      }\n    }\n  }, {\n    key: \"closeConnections\",\n    value: function closeConnections() {\n      this.setIntervalId && clearInterval(this.setIntervalId);\n      this._producer && this._producer.terminate();\n      this._noopProducer && this._noopProducer.terminate();\n      this._consumers && this._consumers.forEach(function (consumer) {\n        return consumer.terminate();\n      });\n    }\n  }]);\n\n  return Stream;\n}();\n\nexports.Stream = Stream;","map":null,"metadata":{},"sourceType":"script"}